
SuProject5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000428  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS
  4 .ARM          00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000015ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f0  080005f0  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  080005f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080005f4  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cbd  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000046a  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000084  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ff1  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001616  00000000  00000000  00018895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a602  00000000  00000000  00019eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000944ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  000944f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0009468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005d4 	.word	0x080005d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080005d4 	.word	0x080005d4

08000204 <pc9_adc_init>:
#include "adc.h"

void pc9_adc_init() {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2); // Enable clock for GPIOC
 8000208:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <pc9_adc_init+0x70>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a19      	ldr	r2, [pc, #100]	@ (8000274 <pc9_adc_init+0x70>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER |= (3 << 18);  // Set PC9 to analog mode
 8000214:	4b18      	ldr	r3, [pc, #96]	@ (8000278 <pc9_adc_init+0x74>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a17      	ldr	r2, [pc, #92]	@ (8000278 <pc9_adc_init+0x74>)
 800021a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800021e:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= (1 << 8); // Enable clock for ADC1
 8000220:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <pc9_adc_init+0x70>)
 8000222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000224:	4a13      	ldr	r2, [pc, #76]	@ (8000274 <pc9_adc_init+0x70>)
 8000226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800022a:	6453      	str	r3, [r2, #68]	@ 0x44

    ADC1->SQR1 &= ~(0xF << 20);
 800022c:	4b13      	ldr	r3, [pc, #76]	@ (800027c <pc9_adc_init+0x78>)
 800022e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000230:	4a12      	ldr	r2, [pc, #72]	@ (800027c <pc9_adc_init+0x78>)
 8000232:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000236:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR3 |= (9 << 0); // Select PC9 (ADC Channel 9)
 8000238:	4b10      	ldr	r3, [pc, #64]	@ (800027c <pc9_adc_init+0x78>)
 800023a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800023c:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <pc9_adc_init+0x78>)
 800023e:	f043 0309 	orr.w	r3, r3, #9
 8000242:	6353      	str	r3, [r2, #52]	@ 0x34

    ADC1->CR1 |= (1 << 8);       // Set scan mode
 8000244:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <pc9_adc_init+0x78>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <pc9_adc_init+0x78>)
 800024a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800024e:	6053      	str	r3, [r2, #4]
    ADC1->CR2 |= (1 << 1);       // Enable continuous conversion mode
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <pc9_adc_init+0x78>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	4a09      	ldr	r2, [pc, #36]	@ (800027c <pc9_adc_init+0x78>)
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (1 << 0);       // Enable ADC
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <pc9_adc_init+0x78>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a06      	ldr	r2, [pc, #24]	@ (800027c <pc9_adc_init+0x78>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6093      	str	r3, [r2, #8]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020800 	.word	0x40020800
 800027c:	40012000 	.word	0x40012000

08000280 <start_con>:

void start_con() {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    ADC1->CR2 |= (1 << 30);      // Start conversion
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <start_con+0x1c>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <start_con+0x1c>)
 800028a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800028e:	6093      	str	r3, [r2, #8]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40012000 	.word	0x40012000

080002a0 <adc_read>:

uint32_t adc_read() {
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
    while (!(ADC1->SR & (1 << 1))); // Wait for conversion to complete
 80002a4:	bf00      	nop
 80002a6:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <adc_read+0x20>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <adc_read+0x6>
    return ADC1->DR;
 80002b2:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <adc_read+0x20>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	40012000 	.word	0x40012000

080002c4 <gpio_init>:
#include "gpio.h"

void gpio_init() {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and GPIOC
    RCC->AHB1ENR |= (1 << 0) | (1 << 2);
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <gpio_init+0x64>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a16      	ldr	r2, [pc, #88]	@ (8000328 <gpio_init+0x64>)
 80002ce:	f043 0305 	orr.w	r3, r3, #5
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA9 and PA10 for UART1 (Alternate Function)
    GPIOA->MODER |= (2 << 18) | (2 << 20);
 80002d4:	4b15      	ldr	r3, [pc, #84]	@ (800032c <gpio_init+0x68>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a14      	ldr	r2, [pc, #80]	@ (800032c <gpio_init+0x68>)
 80002da:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80002de:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= (7 << 4) | (7 << 8);
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <gpio_init+0x68>)
 80002e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002e4:	4a11      	ldr	r2, [pc, #68]	@ (800032c <gpio_init+0x68>)
 80002e6:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80002ea:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PC10 and PC11 for UART3 (Alternate Function)
    GPIOC->MODER |= (2 << 20) | (2 << 22);
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <gpio_init+0x6c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000330 <gpio_init+0x6c>)
 80002f2:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80002f6:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] |= (7 << 8) | (7 << 12);
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <gpio_init+0x6c>)
 80002fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000330 <gpio_init+0x6c>)
 80002fe:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000302:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure PC6 for LED (Output mode)
    GPIOC->MODER |= (1 << 12);
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <gpio_init+0x6c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <gpio_init+0x6c>)
 800030a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800030e:	6013      	str	r3, [r2, #0]

    // Configure PC8 for Button (Input mode)
    GPIOC->MODER &= ~(3 << 16);
 8000310:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <gpio_init+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <gpio_init+0x6c>)
 8000316:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800031a:	6013      	str	r3, [r2, #0]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800
 800032c:	40020000 	.word	0x40020000
 8000330:	40020800 	.word	0x40020800

08000334 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e00c      	b.n	800035c <delay_ms+0x28>
        for (uint32_t j = 0; j < 16000; j++) {}
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	e002      	b.n	800034e <delay_ms+0x1a>
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3301      	adds	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8000354:	d3f8      	bcc.n	8000348 <delay_ms+0x14>
    for (uint32_t i = 0; i < ms; i++) {
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	d3ee      	bcc.n	8000342 <delay_ms+0xe>
    }
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
	...

08000374 <main>:

uint32_t adc_val = 0;
uint32_t last_adc_val = 0;
uint8_t rx[8];

int main(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
    uint8_t cnt = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	71fb      	strb	r3, [r7, #7]

    pc9_adc_init();
 800037e:	f7ff ff41 	bl	8000204 <pc9_adc_init>
    gpio_init();
 8000382:	f7ff ff9f 	bl	80002c4 <gpio_init>
    uart1_tx_init();
 8000386:	f000 f86b 	bl	8000460 <uart1_tx_init>
    uart3_rx_init();
 800038a:	f000 f88b 	bl	80004a4 <uart3_rx_init>

    while (1) {
        if (!(GPIOC->IDR & (1 << 8))) { // Button pressed
 800038e:	4b2e      	ldr	r3, [pc, #184]	@ (8000448 <main+0xd4>)
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000396:	2b00      	cmp	r3, #0
 8000398:	d149      	bne.n	800042e <main+0xba>
            // Start ADC conversion
            start_con();
 800039a:	f7ff ff71 	bl	8000280 <start_con>
            adc_val = adc_read();
 800039e:	f7ff ff7f 	bl	80002a0 <adc_read>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a29      	ldr	r2, [pc, #164]	@ (800044c <main+0xd8>)
 80003a6:	6013      	str	r3, [r2, #0]

            if (adc_val != last_adc_val) {
 80003a8:	4b28      	ldr	r3, [pc, #160]	@ (800044c <main+0xd8>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <main+0xdc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d0ec      	beq.n	800038e <main+0x1a>
//                GPIOC->ODR |= (1 << 6);

                uart_send_data(adc_val);
 80003b4:	4b25      	ldr	r3, [pc, #148]	@ (800044c <main+0xd8>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f895 	bl	80004e8 <uart_send_data>

                // Transmit and receive data via UART
                for (cnt = 0; cnt < sizeof(rx); cnt++) {
 80003be:	2300      	movs	r3, #0
 80003c0:	71fb      	strb	r3, [r7, #7]
 80003c2:	e022      	b.n	800040a <main+0x96>
                    USART1->DR = (adc_val >> (cnt * 8)) & 0xFF;
 80003c4:	4b21      	ldr	r3, [pc, #132]	@ (800044c <main+0xd8>)
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	fa22 f303 	lsr.w	r3, r2, r3
 80003d0:	4a20      	ldr	r2, [pc, #128]	@ (8000454 <main+0xe0>)
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	6053      	str	r3, [r2, #4]
                    while (!(USART1->SR & (1 << 7))); // Wait for TX
 80003d6:	bf00      	nop
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <main+0xe0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <main+0x64>

                    while (!(USART3->SR & (1 << 5))); // Wait for RX
 80003e4:	bf00      	nop
 80003e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <main+0xe4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0320 	and.w	r3, r3, #32
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <main+0x72>
                    rx[cnt] = USART3->DR;
 80003f2:	4b19      	ldr	r3, [pc, #100]	@ (8000458 <main+0xe4>)
 80003f4:	685a      	ldr	r2, [r3, #4]
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	b2d1      	uxtb	r1, r2
 80003fa:	4a18      	ldr	r2, [pc, #96]	@ (800045c <main+0xe8>)
 80003fc:	54d1      	strb	r1, [r2, r3]

                    delay_ms(50);
 80003fe:	2032      	movs	r0, #50	@ 0x32
 8000400:	f7ff ff98 	bl	8000334 <delay_ms>
                for (cnt = 0; cnt < sizeof(rx); cnt++) {
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	3301      	adds	r3, #1
 8000408:	71fb      	strb	r3, [r7, #7]
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b07      	cmp	r3, #7
 800040e:	d9d9      	bls.n	80003c4 <main+0x50>
                }

                last_adc_val = adc_val;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <main+0xd8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <main+0xdc>)
 8000416:	6013      	str	r3, [r2, #0]

                GPIOC->ODR &= ~(1 << 6);
 8000418:	4b0b      	ldr	r3, [pc, #44]	@ (8000448 <main+0xd4>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a0a      	ldr	r2, [pc, #40]	@ (8000448 <main+0xd4>)
 800041e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000422:	6153      	str	r3, [r2, #20]

                // Delay for 1 second
                delay_ms(500);
 8000424:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000428:	f7ff ff84 	bl	8000334 <delay_ms>
 800042c:	e7af      	b.n	800038e <main+0x1a>
            }
        } else {
            uart_send_data(last_adc_val);
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <main+0xdc>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f858 	bl	80004e8 <uart_send_data>

            GPIOC->ODR &= ~(1 << 6);
 8000438:	4b03      	ldr	r3, [pc, #12]	@ (8000448 <main+0xd4>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a02      	ldr	r2, [pc, #8]	@ (8000448 <main+0xd4>)
 800043e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000442:	6153      	str	r3, [r2, #20]
        if (!(GPIOC->IDR & (1 << 8))) { // Button pressed
 8000444:	e7a3      	b.n	800038e <main+0x1a>
 8000446:	bf00      	nop
 8000448:	40020800 	.word	0x40020800
 800044c:	2000001c 	.word	0x2000001c
 8000450:	20000020 	.word	0x20000020
 8000454:	40011000 	.word	0x40011000
 8000458:	40004800 	.word	0x40004800
 800045c:	20000024 	.word	0x20000024

08000460 <uart1_tx_init>:
#include "uart.h"

void uart1_tx_init() {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 4);    // USART1 clock
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <uart1_tx_init+0x3c>)
 8000466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000468:	4a0c      	ldr	r2, [pc, #48]	@ (800049c <uart1_tx_init+0x3c>)
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	6453      	str	r3, [r2, #68]	@ 0x44
    USART1->BRR = 0x683;         // baud rate
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <uart1_tx_init+0x40>)
 8000472:	f240 6283 	movw	r2, #1667	@ 0x683
 8000476:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= (1 << 3);     // TE bit no 3, enabling transmission
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <uart1_tx_init+0x40>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <uart1_tx_init+0x40>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= (1 << 13);    // UE bit no 13, enabling USART
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <uart1_tx_init+0x40>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <uart1_tx_init+0x40>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048e:	60d3      	str	r3, [r2, #12]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800
 80004a0:	40011000 	.word	0x40011000

080004a4 <uart3_rx_init>:

void uart3_rx_init() {
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 18);   // USART3 clock
 80004a8:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <uart3_rx_init+0x3c>)
 80004aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ac:	4a0c      	ldr	r2, [pc, #48]	@ (80004e0 <uart3_rx_init+0x3c>)
 80004ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004b2:	6413      	str	r3, [r2, #64]	@ 0x40
    USART3->BRR = 0x683;         // baud rate
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <uart3_rx_init+0x40>)
 80004b6:	f240 6283 	movw	r2, #1667	@ 0x683
 80004ba:	609a      	str	r2, [r3, #8]
    USART3->CR1 |= (1 << 2);     // RE bit no 2, enabling receiving
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <uart3_rx_init+0x40>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <uart3_rx_init+0x40>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	60d3      	str	r3, [r2, #12]
    USART3->CR1 |= (1 << 13);    // UE bit no 13, enabling USART
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <uart3_rx_init+0x40>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <uart3_rx_init+0x40>)
 80004ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004d2:	60d3      	str	r3, [r2, #12]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40004800 	.word	0x40004800

080004e8 <uart_send_data>:

void uart_send_data(uint32_t data) {
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    char buffer[10];
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	75fb      	strb	r3, [r7, #23]
 80004f4:	e010      	b.n	8000518 <uart_send_data+0x30>
        USART1->DR = buffer[i];
 80004f6:	7dfb      	ldrb	r3, [r7, #23]
 80004f8:	3318      	adds	r3, #24
 80004fa:	443b      	add	r3, r7
 80004fc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <uart_send_data+0x4c>)
 8000502:	605a      	str	r2, [r3, #4]
        while (!(USART1->SR & (1 << 7))); // Wait for TXE
 8000504:	bf00      	nop
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <uart_send_data+0x4c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f9      	beq.n	8000506 <uart_send_data+0x1e>
    for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 8000512:	7dfb      	ldrb	r3, [r7, #23]
 8000514:	3301      	adds	r3, #1
 8000516:	75fb      	strb	r3, [r7, #23]
 8000518:	7dfb      	ldrb	r3, [r7, #23]
 800051a:	3318      	adds	r3, #24
 800051c:	443b      	add	r3, r7
 800051e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1e7      	bne.n	80004f6 <uart_send_data+0xe>
    }
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	371c      	adds	r7, #28
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40011000 	.word	0x40011000

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	@ (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	@ (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	@ (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 f811 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff ff03 	bl	8000374 <main>

0800056e <LoopForever>:

LoopForever:
  b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800057c:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000580:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000584:	2000002c 	.word	0x2000002c

08000588 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC_IRQHandler>
	...

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4d0d      	ldr	r5, [pc, #52]	@ (80005c4 <__libc_init_array+0x38>)
 8000590:	4c0d      	ldr	r4, [pc, #52]	@ (80005c8 <__libc_init_array+0x3c>)
 8000592:	1b64      	subs	r4, r4, r5
 8000594:	10a4      	asrs	r4, r4, #2
 8000596:	2600      	movs	r6, #0
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	4d0b      	ldr	r5, [pc, #44]	@ (80005cc <__libc_init_array+0x40>)
 800059e:	4c0c      	ldr	r4, [pc, #48]	@ (80005d0 <__libc_init_array+0x44>)
 80005a0:	f000 f818 	bl	80005d4 <_init>
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	2600      	movs	r6, #0
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
